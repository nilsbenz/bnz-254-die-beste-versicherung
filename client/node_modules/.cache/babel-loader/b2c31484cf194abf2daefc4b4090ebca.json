{"ast":null,"code":"import _slicedToArray from \"/Users/nilsbenz/sources/TBZ/m254/die-beste-versicherung/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nilsbenz/sources/TBZ/m254/die-beste-versicherung/src/components/pages/MainInterface/MainInterface.tsx\";\nimport { Button, Container, createStyles, FormControl, Grid, Input, InputAdornment, InputLabel, makeStyles, MenuItem, Select, TextField, Typography, Paper } from \"@material-ui/core\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport React, { useState, useEffect } from \"react\";\nimport TaskService from \"../../../services/taskService\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    height: \"2000px\",\n    padding: theme.spacing(3)\n  },\n  form: {\n    marginTop: theme.spacing(2)\n  },\n  textField: {\n    width: \"100%\"\n  },\n  alignEnd: {\n    display: \"flex\",\n    justifyContent: \"flex-end\"\n  },\n  paper: {\n    padding: theme.spacing(3),\n    marginTop: theme.spacing(3)\n  },\n  checkButtons: {\n    display: \"grid\",\n    gridAutoFlow: \"column\",\n    gridGap: theme.spacing(2)\n  }\n}));\n\nconst MainInterface = ({\n  task,\n  completedTask\n}) => {\n  const classes = useStyles();\n  const taskService = new TaskService();\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        taskVariables = _useState2[0],\n        setTaskVariables = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        firstname = _useState4[0],\n        setFirstname = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        lastname = _useState6[0],\n        setLastname = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        address = _useState8[0],\n        setAddress = _useState8[1];\n\n  const _useState9 = useState(\"\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        city = _useState10[0],\n        setCity = _useState10[1];\n\n  const _useState11 = useState(\"\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        email = _useState12[0],\n        setEmail = _useState12[1];\n\n  const _useState13 = useState(\"\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        message = _useState14[0],\n        setMessage = _useState14[1];\n\n  const _useState15 = useState(null),\n        _useState16 = _slicedToArray(_useState15, 2),\n        amount = _useState16[0],\n        setAmount = _useState16[1];\n\n  const _useState17 = useState(null),\n        _useState18 = _slicedToArray(_useState17, 2),\n        insurance = _useState18[0],\n        setInsurance = _useState18[1];\n\n  useEffect(() => {\n    if (task) {\n      const fetchData = async () => {\n        const res = await taskService.listTaskVariables(task.id);\n        setTaskVariables(res);\n      };\n\n      fetchData();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [task]);\n\n  const handleRecordDamage = () => {\n    const variables = {\n      variables: {\n        firstname: {\n          value: firstname\n        },\n        lastname: {\n          value: lastname\n        },\n        address: {\n          value: address\n        },\n        city: {\n          value: city\n        },\n        email: {\n          value: email\n        },\n        message: {\n          value: message\n        },\n        amount: {\n          value: amount || 0\n        },\n        insurance: {\n          value: insurance\n        }\n      }\n    };\n\n    if (task) {\n      const complete = async () => {\n        taskService.complete(task.id, variables);\n        completedTask();\n      };\n\n      complete();\n    }\n  };\n\n  const handleCheckDamage = granted => {\n    const variables = {\n      variables: {\n        granted: {\n          value: granted\n        }\n      }\n    };\n\n    if (task) {\n      const complete = async () => {\n        taskService.complete(task.id, variables);\n        completedTask();\n      };\n\n      complete();\n    }\n  };\n\n  if (task) {\n    if (task.taskDefinitionKey === \"recordDamage\") {\n      return React.createElement(Container, {\n        maxWidth: \"sm\",\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, task.name), React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Bitte f\\xFClle das nachfolgende Formular aus.\"), React.createElement(\"form\", {\n        className: classes.form,\n        noValidate: true,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        alignItems: \"center\",\n        justify: \"center\",\n        spacing: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"firstname\",\n        label: \"Vorname\",\n        value: firstname,\n        onChange: e => setFirstname(e.target.value),\n        className: classes.textField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"lastname\",\n        label: \"Nachname\",\n        value: lastname,\n        onChange: e => setLastname(e.target.value),\n        className: classes.textField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"address\",\n        label: \"Adresse\",\n        value: address,\n        onChange: e => setAddress(e.target.value),\n        className: classes.textField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"city\",\n        label: \"Stadt\",\n        value: city,\n        onChange: e => setCity(e.target.value),\n        className: classes.textField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"email\",\n        label: \"Mailadresse\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        className: classes.textField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        className: classes.textField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(InputLabel, {\n        htmlFor: \"amount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"H\\xF6he des Schadensfalls\"), React.createElement(Input, {\n        id: \"amount\",\n        value: amount,\n        onChange: e => e.target.value.match(/^\\d+\\.\\d+$/) && setAmount(Number(e.target.value)),\n        startAdornment: React.createElement(InputAdornment, {\n          position: \"start\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, \"CHF\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }))), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        className: classes.textField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(InputLabel, {\n        id: \"insurance-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Welche Versicherung haben Sie abgeschlossen?\"), React.createElement(Select, {\n        labelId: \"insurance-label\",\n        id: \"insurance\",\n        value: insurance,\n        onChange: e => setInsurance(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(MenuItem, {\n        value: \"bronze\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"Bronze\"), React.createElement(MenuItem, {\n        value: \"silver\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"Silber\"), React.createElement(MenuItem, {\n        value: \"gold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"Gold\")))), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"message\",\n        label: \"Ihre Geschichte\",\n        className: classes.textField,\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        multiline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.alignEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleRecordDamage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Erfassen\")))));\n    } else if (taskVariables) {\n      var _taskVariables$firstn, _taskVariables$lastna, _taskVariables$amount, _taskVariables$messag, _taskVariables$payedA;\n\n      return React.createElement(Container, {\n        maxWidth: \"sm\",\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, task.name), React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, \"Bitte pr\\xFCfe den folgenden Sachverhalt.\"), React.createElement(Paper, {\n        className: classes.paper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        alignItems: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"Name:\")), React.createElement(Grid, {\n        item: true,\n        xs: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, (_taskVariables$firstn = taskVariables.firstname) === null || _taskVariables$firstn === void 0 ? void 0 : _taskVariables$firstn.value, \" \", (_taskVariables$lastna = taskVariables.lastname) === null || _taskVariables$lastna === void 0 ? void 0 : _taskVariables$lastna.value)), React.createElement(Grid, {\n        item: true,\n        xs: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, \"H\\xF6he des Schadensfalls:\")), React.createElement(Grid, {\n        item: true,\n        xs: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, taskVariables.amount && (Math.round(((_taskVariables$amount = taskVariables.amount) === null || _taskVariables$amount === void 0 ? void 0 : _taskVariables$amount.value) * 100) / 100).toFixed(2), \" \", \"Fr.\")), React.createElement(Grid, {\n        item: true,\n        xs: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, \"Begr\\xFCndung:\")), React.createElement(Grid, {\n        item: true,\n        xs: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, (_taskVariables$messag = taskVariables.message) === null || _taskVariables$messag === void 0 ? void 0 : _taskVariables$messag.value)), React.createElement(Grid, {\n        item: true,\n        xs: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, \"\\xDCbernommener Betrag:\")), React.createElement(Grid, {\n        item: true,\n        xs: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, taskVariables.payedAmount && (Math.round(((_taskVariables$payedA = taskVariables.payedAmount) === null || _taskVariables$payedA === void 0 ? void 0 : _taskVariables$payedA.value) * 100) / 100).toFixed(2), \" \", \"Fr.\"))), React.createElement(\"div\", {\n        className: classes.checkButtons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        startIcon: React.createElement(CheckIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297\n          },\n          __self: this\n        }),\n        onClick: () => handleCheckDamage(true),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, \"Best\\xE4tigen\"), React.createElement(Button, {\n        variant: \"outlined\",\n        color: \"secondary\",\n        startIcon: React.createElement(ClearIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 305\n          },\n          __self: this\n        }),\n        onClick: () => handleCheckDamage(false),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, \"Verwerfen\"))));\n    } else {\n      return React.createElement(Container, {\n        maxWidth: \"sm\",\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, \"Kein Task ausgew\\xE4hlt\"), React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, \"Bitte w\\xE4hle einen Task aus der Liste links.\"));\n    }\n  } else {\n    return React.createElement(Container, {\n      maxWidth: \"sm\",\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \"Kein Task ausgew\\xE4hlt\"), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"Bitte w\\xE4hle einen Task aus der Liste links.\"));\n  }\n};\n\nexport default MainInterface;","map":{"version":3,"sources":["/Users/nilsbenz/sources/TBZ/m254/die-beste-versicherung/src/components/pages/MainInterface/MainInterface.tsx"],"names":["Button","Container","createStyles","FormControl","Grid","Input","InputAdornment","InputLabel","makeStyles","MenuItem","Select","TextField","Typography","Paper","CheckIcon","ClearIcon","React","useState","useEffect","TaskService","useStyles","theme","root","height","padding","spacing","form","marginTop","textField","width","alignEnd","display","justifyContent","paper","checkButtons","gridAutoFlow","gridGap","MainInterface","task","completedTask","classes","taskService","taskVariables","setTaskVariables","firstname","setFirstname","lastname","setLastname","address","setAddress","city","setCity","email","setEmail","message","setMessage","amount","setAmount","insurance","setInsurance","fetchData","res","listTaskVariables","id","handleRecordDamage","variables","value","complete","handleCheckDamage","granted","taskDefinitionKey","name","e","target","match","Number","Math","round","toFixed","payedAmount"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Container,\n  createStyles,\n  FormControl,\n  Grid,\n  Input,\n  InputAdornment,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n  Theme,\n  Typography,\n  Paper\n} from \"@material-ui/core\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport React, { useState, useEffect } from \"react\";\nimport TaskService from \"../../../services/taskService\";\nimport { Task } from \"../../../types/Task\";\nimport {\n  CheckDamageVariables,\n  RecordDamageVariables,\n  TaskVariables\n} from \"../../../types/Variables\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: \"2000px\",\n      padding: theme.spacing(3)\n    },\n    form: {\n      marginTop: theme.spacing(2)\n    },\n    textField: {\n      width: \"100%\"\n    },\n    alignEnd: {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n    },\n    paper: {\n      padding: theme.spacing(3),\n      marginTop: theme.spacing(3)\n    },\n    checkButtons: {\n      display: \"grid\",\n      gridAutoFlow: \"column\",\n      gridGap: theme.spacing(2)\n    }\n  })\n);\n\ninterface Props {\n  task: Task | null;\n  completedTask: () => void;\n}\n\nconst MainInterface: React.FC<Props> = ({ task, completedTask }) => {\n  const classes = useStyles();\n\n  const taskService: TaskService = new TaskService();\n\n  const [taskVariables, setTaskVariables] = useState<TaskVariables | null>(\n    null\n  );\n  const [firstname, setFirstname] = useState<string>(\"\");\n  const [lastname, setLastname] = useState<string>(\"\");\n  const [address, setAddress] = useState<string>(\"\");\n  const [city, setCity] = useState<string>(\"\");\n  const [email, setEmail] = useState<string>(\"\");\n  const [message, setMessage] = useState<string>(\"\");\n  const [amount, setAmount] = useState<number | null>(null);\n  const [insurance, setInsurance] = useState<\n    \"bronze\" | \"silver\" | \"gold\" | null\n  >(null);\n\n  useEffect(() => {\n    if (task) {\n      const fetchData = async () => {\n        const res = await taskService.listTaskVariables(task.id);\n        setTaskVariables(res);\n      };\n      fetchData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [task]);\n\n  const handleRecordDamage = () => {\n    const variables: RecordDamageVariables = {\n      variables: {\n        firstname: { value: firstname },\n        lastname: { value: lastname },\n        address: { value: address },\n        city: { value: city },\n        email: { value: email },\n        message: { value: message },\n        amount: { value: amount || 0 },\n        insurance: { value: insurance }\n      }\n    };\n    if (task) {\n      const complete = async () => {\n        taskService.complete(task.id, variables);\n        completedTask();\n      };\n      complete();\n    }\n  };\n\n  const handleCheckDamage = (granted: boolean) => {\n    const variables: CheckDamageVariables = {\n      variables: {\n        granted: { value: granted }\n      }\n    };\n    if (task) {\n      const complete = async () => {\n        taskService.complete(task.id, variables);\n        completedTask();\n      };\n      complete();\n    }\n  };\n\n  if (task) {\n    if (task.taskDefinitionKey === \"recordDamage\") {\n      return (\n        <Container maxWidth=\"sm\" className={classes.root}>\n          <Typography variant=\"h4\">{task.name}</Typography>\n          <Typography>Bitte fülle das nachfolgende Formular aus.</Typography>\n          <form className={classes.form} noValidate autoComplete=\"off\">\n            <Grid container alignItems=\"center\" justify=\"center\" spacing={2}>\n              <Grid item xs={6}>\n                <TextField\n                  id=\"firstname\"\n                  label=\"Vorname\"\n                  value={firstname}\n                  onChange={e => setFirstname(e.target.value)}\n                  className={classes.textField}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <TextField\n                  id=\"lastname\"\n                  label=\"Nachname\"\n                  value={lastname}\n                  onChange={e => setLastname(e.target.value)}\n                  className={classes.textField}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <TextField\n                  id=\"address\"\n                  label=\"Adresse\"\n                  value={address}\n                  onChange={e => setAddress(e.target.value)}\n                  className={classes.textField}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <TextField\n                  id=\"city\"\n                  label=\"Stadt\"\n                  value={city}\n                  onChange={e => setCity(e.target.value)}\n                  className={classes.textField}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <TextField\n                  id=\"email\"\n                  label=\"Mailadresse\"\n                  value={email}\n                  onChange={e => setEmail(e.target.value)}\n                  className={classes.textField}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <FormControl className={classes.textField}>\n                  <InputLabel htmlFor=\"amount\">\n                    Höhe des Schadensfalls\n                  </InputLabel>\n                  <Input\n                    id=\"amount\"\n                    value={amount}\n                    onChange={e =>\n                      e.target.value.match(/^\\d+\\.\\d+$/) &&\n                      setAmount(Number(e.target.value))\n                    }\n                    startAdornment={\n                      <InputAdornment position=\"start\">CHF</InputAdornment>\n                    }\n                  />\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <FormControl className={classes.textField}>\n                  <InputLabel id=\"insurance-label\">\n                    Welche Versicherung haben Sie abgeschlossen?\n                  </InputLabel>\n                  <Select\n                    labelId=\"insurance-label\"\n                    id=\"insurance\"\n                    value={insurance}\n                    onChange={e =>\n                      setInsurance(\n                        e.target.value as \"gold\" | \"silver\" | \"bronze\"\n                      )\n                    }\n                  >\n                    <MenuItem value={\"bronze\"}>Bronze</MenuItem>\n                    <MenuItem value={\"silver\"}>Silber</MenuItem>\n                    <MenuItem value={\"gold\"}>Gold</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  id=\"message\"\n                  label=\"Ihre Geschichte\"\n                  className={classes.textField}\n                  value={message}\n                  onChange={e => setMessage(e.target.value)}\n                  multiline\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.alignEnd}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleRecordDamage}\n                >\n                  Erfassen\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </Container>\n      );\n    } else if (taskVariables) {\n      return (\n        <Container maxWidth=\"sm\" className={classes.root}>\n          <Typography variant=\"h4\">{task.name}</Typography>\n          <Typography>Bitte prüfe den folgenden Sachverhalt.</Typography>\n          <Paper className={classes.paper}>\n            <Grid container alignItems=\"center\">\n              <Grid item xs={5}>\n                <Typography variant=\"body2\">Name:</Typography>\n              </Grid>\n              <Grid item xs={7}>\n                <Typography variant=\"body1\">\n                  {taskVariables.firstname?.value}{\" \"}\n                  {taskVariables.lastname?.value}\n                </Typography>\n              </Grid>\n              <Grid item xs={5}>\n                <Typography variant=\"body2\">Höhe des Schadensfalls:</Typography>\n              </Grid>\n              <Grid item xs={7}>\n                <Typography variant=\"body1\">\n                  {taskVariables.amount &&\n                    (\n                      Math.round(taskVariables.amount?.value * 100) / 100\n                    ).toFixed(2)}{\" \"}\n                  Fr.\n                </Typography>\n              </Grid>\n              <Grid item xs={5}>\n                <Typography variant=\"body2\">Begründung:</Typography>\n              </Grid>\n              <Grid item xs={7}>\n                <Typography variant=\"body1\">\n                  {taskVariables.message?.value}\n                </Typography>\n              </Grid>\n              <Grid item xs={5}>\n                <Typography variant=\"body2\">Übernommener Betrag:</Typography>\n              </Grid>\n              <Grid item xs={7}>\n                <Typography variant=\"body1\">\n                  {taskVariables.payedAmount &&\n                    (\n                      Math.round(taskVariables.payedAmount?.value * 100) / 100\n                    ).toFixed(2)}{\" \"}\n                  Fr.\n                </Typography>\n              </Grid>\n            </Grid>\n            <div className={classes.checkButtons}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                startIcon={<CheckIcon />}\n                onClick={() => handleCheckDamage(true)}\n              >\n                Bestätigen\n              </Button>\n              <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<ClearIcon />}\n                onClick={() => handleCheckDamage(false)}\n              >\n                Verwerfen\n              </Button>\n            </div>\n          </Paper>\n        </Container>\n      );\n    } else {\n      return (\n        <Container maxWidth=\"sm\" className={classes.root}>\n          <Typography variant=\"h4\">Kein Task ausgewählt</Typography>\n          <Typography>Bitte wähle einen Task aus der Liste links.</Typography>\n        </Container>\n      );\n    }\n  } else {\n    return (\n      <Container maxWidth=\"sm\" className={classes.root}>\n        <Typography variant=\"h4\">Kein Task ausgewählt</Typography>\n        <Typography>Bitte wähle einen Task aus der Liste links.</Typography>\n      </Container>\n    );\n  }\n};\n\nexport default MainInterface;\n"]},"metadata":{},"sourceType":"module"}